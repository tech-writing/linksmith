[build-system]
build-backend = "setuptools.build_meta"
requires = [
  "setuptools>=42", # At least v42 of setuptools required.
  "versioningit<4",
]

[project]
name = "linksmith"
description = "A program for processing Hyperlinks, Sphinx references, and inventories."
readme = "README.md"
keywords = [
  "authoring",
  "css",
  "design",
  "documentation",
  "html",
  "http",
  "hyperlink",
  "link",
  "markdown",
  "myst",
  "referencing",
  "restructuredtext",
  "sphinx",
  "swiss army knife",
  "tech writing",
  "toolbox",
  "web",
]
license = { file = "LICENSE" }
authors = [
  { name = "Andreas Motl", email = "andreas.motl@panodata.org" },
]
requires-python = ">=3.9"
classifiers = [
  "Development Status :: 1 - Planning",
  "Environment :: Web Environment",
  "Framework :: Sphinx",
  "Intended Audience :: Customer Service",
  "Intended Audience :: Developers",
  "Intended Audience :: Education",
  "Intended Audience :: End Users/Desktop",
  "Intended Audience :: Information Technology",
  "Intended Audience :: Manufacturing",
  "Intended Audience :: Science/Research",
  "Intended Audience :: System Administrators",
  "Intended Audience :: Telecommunications Industry",
  "License :: OSI Approved :: MIT License",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Programming Language :: Python :: Implementation :: CPython",
  "Topic :: Documentation",
  "Topic :: Documentation :: Sphinx",
  "Topic :: Education",
  "Topic :: File Formats",
  "Topic :: Scientific/Engineering",
  "Topic :: Software Development :: Bug Tracking",
  "Topic :: Software Development :: Code Generators",
  "Topic :: Software Development :: Documentation",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Text Processing",
  "Topic :: Text Processing :: Markup",
  "Topic :: Text Processing :: Markup :: HTML",
  "Topic :: Text Processing :: Markup :: Markdown",
  "Topic :: Text Processing :: Markup :: reStructuredText",
]
dynamic = [
  "version",
]
dependencies = [
  "dynamic-imports<2",
  "marko<3",
  "myst-parser[linkify]>=0.18,<5",
  "pueblo[cli]==0.0.11",
  "pyyaml<7",
  "requests<3",
  "rich-click<2",
  "sphinx<8.1",
  "sphobjinv<2.4",
  "tabulate<0.10",
  "verlib2==0.2.0",
]
optional-dependencies.develop = [
  "black<25",
  "mypy<1.15",
  "poethepoet<1",
  "pyproject-fmt<3",
  "ruff<0.9",
  "validate-pyproject<0.19",
]
optional-dependencies.docs = [
  "furo==2024.8.6",
  "sphinx<8.1",
  "sphinx-autobuild==2024.2.4",
  "sphinx-copybutton<0.6",
  "sphinx-design-elements<0.5",
]
optional-dependencies.release = [
  "build<2",
  "keyring",
  "twine<7",
]
optional-dependencies.test = [
  "pytest<9",
  "pytest-cov<7",
  "sphinx-pytest<0.3",
]
urls.changelog = "https://github.com/tech-writing/linksmith/blob/main/CHANGES.md"
urls.documentation = "https://linksmith.readthedocs.io/"
urls.homepage = "https://linksmith.readthedocs.io/"
urls.repository = "https://github.com/tech-writing/linksmith"
scripts.anansi = "linksmith.sphinx.community.anansi:cli"
scripts.linksmith = "linksmith.cli:cli"

[tool.setuptools.packages.find]
namespaces = false

[tool.black]
line-length = 120

[tool.ruff]
line-length = 120

lint.select = [
  # flake8-unused-arguments
  "ARG",
  # pyupgrade
  # "UP",
  # flake8-commas
  "COM",
  # Pycodestyle
  "E",
  # eradicate
  "ERA",
  # Pyflakes
  "F",
  # isort
  "I",
  # flake8-quotes
  "Q",
  # return
  "RET",
  # Bandit
  "S",
  # print
  "T20",
  # future-annotations
  # "FA",
  # flake8-type-checking
  "TCH",
  "W",
  # flake8-2020
  "YTT",
  # flake8-use-pathlib
  # "PTH"
]

lint.extend-ignore = [
  # Unnecessary variable assignment before `return` statement
  "RET504",
  # Unnecessary `elif` after `return` statement
  "RET505",
]

lint.per-file-ignores."docs/conf.py" = [ "ERA001" ]   # Allow commented-out code.
lint.per-file-ignores."linksmith/cli.py" = [ "T201" ] # Allow `print`.
lint.per-file-ignores."tests/*" = [ "S101" ]          # Allow use of `assert`.

[tool.pytest.ini_options]
addopts = "-rA --verbosity=3 --cov --cov-report=term-missing --cov-report=xml"
minversion = "2.0"
log_level = "DEBUG"
log_cli_level = "DEBUG"
log_format = "%(asctime)-15s [%(name)-36s] %(levelname)-8s: %(message)s"
testpaths = [
  "linksmith",
  "tests",
]
xfail_strict = true
markers = [
]

[tool.coverage.run]
branch = false
omit = [
  "tests/*",
]
source = [ "linksmith" ]

[tool.coverage.report]
fail_under = 0
show_missing = true

[tool.mypy]
packages = [ "linksmith" ]
exclude = [
]
ignore_missing_imports = true
check_untyped_defs = false
implicit_optional = true
install_types = true
no_implicit_optional = true
non_interactive = true
show_error_codes = true
strict_equality = true
warn_unused_ignores = true
warn_redundant_casts = true

[tool.versioningit.vcs]
method = "git"
default-tag = "0.0.0"

# ===================
# Tasks configuration
# ===================

[tool.poe.tasks]

check = [
  "lint",
  "test",
]

docs-autobuild = [
  { cmd = "sphinx-autobuild --open-browser --watch=docs docs docs/_build" },
]
docs-html = [
  { cmd = "sphinx-build -W --keep-going docs docs/_build" },
]

format = [
  { cmd = "black ." },
  # Configure Ruff not to auto-fix (remove!):
  # unused imports (F401), unused variables (F841), `print` statements (T201), and commented-out code (ERA001).
  { cmd = "ruff check --fix --ignore=ERA --ignore=F401 --ignore=F841 --ignore=T20 --ignore=ERA001 ." },
  { cmd = "pyproject-fmt --keep-full-version pyproject.toml" },
]

lint = [
  { cmd = "ruff check ." },
  { cmd = "black --check ." },
  { cmd = "validate-pyproject pyproject.toml" },
  { cmd = "mypy" },
]

release = [
  { cmd = "python -m build" },
  { cmd = "twine upload dist/*.tar.gz dist/*.whl" },
]

test = { cmd = "pytest" }
